SI 206 W17
Put your name here: Stephanie Schouman

----

Which option for the final project are you choosing -- 1 Beautiful Soup and National Parks

IF YOU ARE CHOOSING OPTION 3, answer the following questions:

* Write 1-3 sentences summarizing what the goal of your project is:


* What are your two data sources? Provide links to documentation or websites you will be getting data from.


* Why are you proposing this project?


* What will the output of this project be? What will it look like, and what information will it contain?


* What are your concerns about this proposal?


-----

THE FOLLOWING QUESTIONS ARE FOR EVERYONE. (Though they may be easier if you are choosing Option 1 or 2, because you can reference the Option 1 or 2 instructions.)

* What will at least one of the classes you're going to define be called?
NationalPark 
Article

* What will that class take as input to its constructor?
NationalPark - HTML-formatted string 
Article - HTML-formatted string

* What will 1 instance of this class represent?
NationalPark - one national park
Article - one article from nps.gov front page

* What are 3 instance variables this class will have? What will they be called, and what information will they hold? Why are they important?
National Park:
- park_name: string, name of the park/monument
- park_description: string, description of park/monument
- park_type: string, type of park/monument (e.g. National Park, National Historic Site, etc…) 
- park_location: string, address/location of park/monument
- park_link: string, url link to plan visit to the park

Article:
- article_title: string, title of article
- article_description: string, description of article
- article_text: string, text of the article

* Explain 2 methods the class will have that are not the class constructor (__init__ method) by answering the following questions for each. 
ONE METHOD:
- What will the name of the method be?
NationalPark: get_states()

- What will the method do?
get_states(): search through the park_location variable of a NationalPark instance and find which, if any, states the park/monument 

- Will it take any additional input? 
get_states(): no

- Will it return anything? Should it change anything about the instance/an instance variable? 
get_states(): returns a list of strings of states abbreviations in which the park is located

- Why is it useful for this class definition, in this program?
get_states(): pulls only the state information from location


ANOTHER METHOD:
- What will the name of the method be?
NationalPark: similar_park()

- What will the method do?
similar_park(): looks through park_type and list returned by get_states() to see if two parks have any commonalities

- Will it take any additional input? 
similar_park(): invoked on one NationalPark instance, takes in another NationalPark instance for comparison

- Will it return anything? Should it change anything about the instance/an instance variable? 
similar_park(): returns list of commonalities (e.g. states that they have in common, the same type of park)

- Why is it useful for this class definition, in this program?
similar_park(): helpful for comparing two NationalPark instances, to see if a user who likes one might like the other


[If you definitely want to have a third, feel free to answer those questions a third time, because you'll have to do so eventually. when you write documentation!]


* What will the tables in your database be?
Parks
States
Articles

* What fields will each database table have? Which field of them is the primary key? You should list the fields for each database table here, e.g.

Parks: 
- Name (PRIMARY KEY), Description, Type, Location, Link
States:
- Name (PRIMARY KEY), Abbreviation, Average Temp.
Articles:
- Title (PRIMARY KEY), Text, URL

* List, in English, 2 queries you'll want to make from your database. At least one should be a JOIN. You can always change these later, but start with  ideas you're interested in and lessen the work on yourself later on! 
(e.g. from class examples, maybe "I want to make a query that accesses the numbers of times each user has favorited tweets, and the number of times tweets that user posted have been favorited -- so I'll be joining the Tweets table and the Users table")

I’d like to make a query that selects the average temperatures for each state in each National Park and the link to plan a park visit (Parks joined with State)

I’d like to make a query that selects the titles of articles that include the names of National Parks (Parks joined with Article)

* What are at least 2 of the data processing mechanics you're planning to use? 

- set comprehension 
- collections: .Counter()

* Why will each of those be useful to you? What data might you use it on? 
(e.g. "Set comprehension: I think I'm going to be looking for unique names and proper nouns in this big set of text, so I'm going to use a set comprehension"). 
>>>This is especially important if you are doing Option 3, but it's important for everyone!<<<

- set comprehension: I think I’m going to accumulate a list (without repeating parks) of parks mentioned in certain Articles.
- collections.Counter(): I would like to see which article appears the most in the articles collected, and I would need to do this separately from the set comprehension. 

* What will your output look like? Will it be a .txt file? a CSV file? something else? What information will it contain? >>>This is especially important if you are doing Option 3, but it's important for everyone!<<<

I think I’ll be making a text file with a list of national parks or monuments that are mentioned in various articles, along with links to visit the parks.
